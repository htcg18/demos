// Generated by CoffeeScript 1.3.3
(function() {
  var asyncMap, fs, getType, log, magic, mmm, os, path, _;

  log = console.log;

  fs = require('fs');

  os = require('os');

  path = require('path');

  _ = require('underscore');

  mmm = require('mmmagic');

  magic = new mmm.Magic(mmm.MAGIC_MIME_TYPE);

  process.env['HOSTNAME'] = os.hostname();

  getType = function(stat) {
    if (stat.isFile()) {
      return 'file';
    }
    if (stat.isDirectory()) {
      return 'directory';
    }
    if (stat.isBlockDevice()) {
      return 'block';
    }
    if (stat.isCharacterDevice()) {
      return 'character';
    }
    if (stat.isSymbolicLink()) {
      return 'symlink';
    }
    if (stat.isFIFO()) {
      return 'fifo';
    }
    if (stat.isSocket()) {
      return 'socket';
    }
  };

  asyncMap = function(list, iterator, cb) {
    var after, i, item, length, results, _i, _len, _results;
    length = list.length;
    results = new Array(length);
    after = _.after(length, function() {
      return cb(results);
    });
    _results = [];
    for (i = _i = 0, _len = list.length; _i < _len; i = ++_i) {
      item = list[i];
      _results.push((function(i) {
        return iterator(item, function(err, result) {
          if (err) {
            throw err;
          }
          results[i] = result;
          return after();
        });
      })(i));
    }
    return _results;
  };

  module.exports = {
    env: function(args, cb) {
      var arg, values, _i, _len;
      values = [];
      for (_i = 0, _len = args.length; _i < _len; _i++) {
        arg = args[_i];
        values.push(process.env[arg]);
      }
      return cb(values);
    },
    ls: function(args, cb) {
      var dirname;
      dirname = args[0];
      if (dirname[0] !== '/') {
        dirname = path.resolve('apps', dirname);
      }
      return fs.readdir(dirname, function(err, basenames) {
        var absolutes, basename;
        if (err) {
          throw err;
        }
        absolutes = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = basenames.length; _i < _len; _i++) {
            basename = basenames[_i];
            _results.push(path.join(dirname, basename));
          }
          return _results;
        })();
        return asyncMap(absolutes, fs.stat, function(stats) {
          var i, stat, _i, _len;
          for (i = _i = 0, _len = stats.length; _i < _len; i = ++_i) {
            stat = stats[i];
            stat.basename = basenames[i];
            stat.type = getType(stat);
          }
          return cb(stats);
        });
      });
    }
  };

}).call(this);
