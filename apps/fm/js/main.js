// Generated by CoffeeScript 1.3.3
(function() {
  var App, Application, Columns, Dir, DirView, File, FileView, Files, Header, log;

  log = console.log.bind(console);

  File = Backbone.Model.extend();

  FileView = Backbone.View.extend({
    tagName: 'li',
    template: JST.file,
    render: function() {
      this.$el.addClass(this.model.get('type'));
      this.$el.html(this.template(this.model.toJSON()));
      return this;
    },
    initialize: function() {
      return this.model.on('change:active', this.active, this);
    },
    active: function(file, active) {
      return this.$el.toggleClass('active', active);
    }
  });

  Files = Backbone.Collection.extend({
    model: File
  });

  Dir = Backbone.Model.extend({
    defaults: {
      index: 0
    },
    goAbs: function(index) {
      if (index === -1) {
        index += this.get('files').length;
      }
      return this.changeIndex(index);
    },
    goRel: function(delta) {
      var index;
      index = delta + this.get('index');
      return this.changeIndex(index);
    },
    changeIndex: function(index) {
      var active, files, length;
      files = this.get('files');
      length = files.length;
      if (!((0 <= index && index < length))) {
        return;
      }
      files.at(this.get('index')).set('active', false);
      active = files.at(index);
      active.set('active', true);
      this.set('index', index);
      return App.set('basename', active.get('basename'));
    }
  });

  DirView = Backbone.View.extend({
    tagName: 'ul',
    initialize: function() {
      return this.collection.on('reset', this.render, this);
    },
    render: function() {
      var _this = this;
      this.collection.each(function(file) {
        var fileView;
        fileView = new FileView({
          model: file
        });
        return _this.$el.append(fileView.render().el);
      });
      this.model.goRel(0);
      return this;
    }
  });

  Columns = Backbone.View.extend({
    shortcuts: {
      'g, shift+k, home': 'home',
      'shift+g, shift+j, end': 'end',
      'j, s, down': 'down',
      'k, w, up': 'up',
      'l, right': 'right',
      'h, left': 'left'
    },
    initialize: function() {
      var f, shortcut, _ref;
      _ref = this.shortcuts;
      for (shortcut in _ref) {
        f = _ref[shortcut];
        key(shortcut, this[f].bind(this));
      }
      return App.on('change:dirname', this.append, this);
    },
    append: function(App, pwd) {
      var _this = this;
      return App.rpc('ls', [pwd], function(files) {
        var dir, dirView;
        files = new Files(files);
        _this.dir = dir = new Dir({
          files: files
        });
        dirView = new DirView({
          collection: files,
          model: dir
        });
        return _this.$el.append(dirView.render().el);
      });
    },
    home: function() {
      return this.dir.goAbs(0);
    },
    end: function() {
      return this.dir.goAbs(-1);
    },
    down: function() {
      return this.dir.goRel(+1);
    },
    up: function() {
      return this.dir.goRel(-1);
    },
    right: function() {
      var basename, dirname;
      dirname = App.get('dirname');
      basename = App.get('basename');
      return App.set('dirname', dirname + basename + '/');
    },
    left: function() {}
  });

  Header = Backbone.View.extend({
    template: JST.header,
    render: function() {
      this.$el.html(this.template(App.toJSON()));
      return this;
    },
    initialize: function() {
      return App.on('change', this.render, this);
    }
  });

  Application = Backbone.Model.extend({
    defaults: {
      basename: ''
    },
    rpc: function(method, args, cb) {
      return $.ajax({
        type: 'POST',
        url: '/rpc',
        data: {
          method: method,
          args: args
        },
        dataType: 'json',
        success: cb
      });
    }
  });

  App = new Application;

  new Header({
    el: '#header'
  });

  new Columns({
    el: '#columns'
  });

  App.rpc('env', ['HOME', 'USER', 'HOSTNAME'], function(data) {
    var dirname, hostname, user;
    dirname = data[0], user = data[1], hostname = data[2];
    dirname += '/';
    return App.set({
      dirname: dirname,
      user: user,
      hostname: hostname
    });
  });

}).call(this);
